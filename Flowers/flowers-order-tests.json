{
  "info": {
    "name": "Flowers Order System Tests",
    "description": "Тесты для проверки системы заказов"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://arch.homework",
      "type": "string"
    },
    {
      "key": "user_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_email",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Register User",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const randomUsername = 'testuser_' + Math.floor(Math.random() * 10000);",
              "const randomEmail = 'test' + Math.floor(Math.random() * 10000) + '@example.com';",
              "pm.variables.set('user_email', randomEmail);",
              "pm.globals.set('testUsername', randomUsername);",
              "pm.globals.set('testEmail', randomEmail);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has token and user ID', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.token).to.not.be.undefined;",
              "    pm.expect(jsonData.userId).to.not.be.undefined;",
              "    pm.variables.set('user_token', jsonData.token);",
              "    pm.variables.set('user_id', jsonData.userId);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"password\": \"test123\",\n  \"email\": \"{{testEmail}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"phone\": \"+1234567890\"\n}"
        },
        "url": "{{baseUrl}}/auth/register"
      }
    },
    {
      "name": "Login User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has token', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.token).to.not.be.undefined;",
              "    pm.variables.set('user_token', jsonData.token);",
              "    pm.variables.set('user_id', jsonData.userId);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"password\": \"test123\"\n}"
        },
        "url": "{{baseUrl}}/auth/login"
      }
    },
    {
      "name": "Deposit Money",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has new balance', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.newBalance).to.not.be.undefined;",
              "    pm.expect(jsonData.newBalance).to.equal(100);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{user_token}}" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": {{user_id}},\n  \"amount\": 100\n}"
        },
        "url": "{{baseUrl}}/bill/deposit"
      }
    },
    {
      "name": "Check Balance After Deposit",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Balance is 100', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.balance).to.equal(100);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{user_token}}" }
        ],
        "url": "{{baseUrl}}/bill/balance/{{user_id}}"
      }
    },
    {
      "name": "Create Successful Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Order created successfully', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.orderId).to.not.be.undefined;",
              "    pm.expect(jsonData.status).to.equal('Completed');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{user_token}}" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"amount\": 50\n}"
        },
        "url": "{{baseUrl}}/orders"
      }
    },
    {
      "name": "Check Balance After Successful Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Balance decreased to 50', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.balance).to.equal(50);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{user_token}}" }
        ],
        "url": "{{baseUrl}}/bill/balance/{{user_id}}"
      }
    },
    {
      "name": "Check Notifications After Success",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Has success notification', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "    pm.expect(jsonData[0].message).to.include('completed successfully');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{user_token}}" }
        ],
        "url": "{{baseUrl}}/notif/notifications/{{user_id}}"
      }
    },
    {
      "name": "Create Failed Order (Insufficient Funds)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Error message about insufficient funds', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('title');",
              "    pm.expect(jsonData.title).to.include('Insufficient funds');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{user_token}}" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"amount\": 100\n}"
        },
        "url": "{{baseUrl}}/orders"
      }
    },
    {
      "name": "Check Balance After Failed Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Balance remains 50 (no change)', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.balance).to.equal(50);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{user_token}}" }
        ],
        "url": "{{baseUrl}}/bill/balance/{{user_id}}"
      }
    },
    {
      "name": "Check Notifications After Failure",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Has failure notification', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "    // Проверяем, что есть уведомление об ошибке",
              "    var failureNotification = jsonData.find(n => n.message.includes('failed') || n.message.includes('error'));",
              "    pm.expect(failureNotification).to.not.be.undefined;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{user_token}}" }
        ],
        "url": "{{baseUrl}}/notif/notifications/{{user_id}}"
      }
    }
  ]
}